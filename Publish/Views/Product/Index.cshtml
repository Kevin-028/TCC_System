@model List<TCC_System_Application.ArduinoService.ProductViewModel>

@{
    ViewBag.Title = "View";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


<section class="section">
    <div class="row">
        <div class="container container-fluid">
            <div class="row">
                <div class="col">
                    <button id="NewProject" type="button" class="btn btn-primary">Novo Projeto</button>
                </div>
            </div>
        </div>
        <div class="container container-fluid m-3">
            @Html.Partial("_TestComunication", new TCC_System_Application.ArduinoService.ProductViewModel())
        </div>
    </div>

</section>

@if (Model != null)
{

    <div class="card">
        <div class="card-body">
            <h5 class="card-title">Projetos Existentes: @Model.Count()</h5>
            <!-- Table with stripped rows -->
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th scope="col">Nome do Projeto</th>
                        <th scope="col">Codigo API</th>
                        <th scope="col">Modulo RFID</th>
                        <th scope="col">Modulo Biometria</th>
                        <th scope="col">Modulo Leitura Facial</th>
                    </tr>
                </thead>
                <tbody class="">
                    @foreach (var item in Model)
                    {
                        <tr>
                            <th scope="row" class="">
                                @item.Name
                            </th>
                            <td class="">
                                @item.Id
                            </td>
                            <td class="" >
                                <div class="center-g">
                                    @if (item.Modules.Any(a => a.Type == "RFID"))
                                    {

                                        <button id="Save" class="btn btn-success modulos" type="button" data-idmodulo="@item.GetModelesType("RFID")" data-type="RFID">
                                            <i class="bx bx-memory-card text-white"></i>
                                        </button>
                                        <div class="form-check form-switch">

                                            <input id="ActiveDesative" class="form-check-input" type="checkbox" @item.GetActive(item, "RFID") data-projectId="@item.Id" data-moduleId="@item.Modules.Where(x => x.Type == "RFID").FirstOrDefault().ModuleId">
                                            <label class="form-check-label" for="ActiveDesative">Status:</label>

                                        </div>  
                                    }
                                    else
                                    {
                                        <button id="Save" class="btn btn-outline-warning modulos" type="button" data-id="@item.Id" data-type="RFID">
                                            <span class="spinner-border spinner-border-sm visually-hidden" role="status" aria-hidden="true"></span>
                                            <i class="bi bi-plus text-dark"></i>
                                            <i class="bx bx-memory-card text-success"></i>
                                        </button>
                                    }

                                </div>
                            </td>
                            <td class="">
                                <div class="center-g">
                                    @if (item.Modules.Any(a => a.Type == "FingerprintReader"))
                                    {

                                        <button class="btn btn-success" type="button" data-idModulo="@item.GetModelesType("FingerprintReader")">
                                            <i class="ri-fingerprint-fill text-white"></i>
                                        </button>
                                        <div class="form-check form-switch">

                                            <input id="ActiveDesative" class="form-check-input" type="checkbox" @item.GetActive(item, "FingerprintReader") data-projectId="@item.Id" data-moduleId="@item.Modules.Where(x => x.Type == "FingerprintReader").FirstOrDefault().ModuleId">
                                            <label class="form-check-label" for="ActiveDesative">Status:</label>
                                        </div>
                                    }
                                    else
                                    {
                                        <button id="Save" class="btn btn-outline-warning modulos" type="button" data-id="@item.Id" data-type="FingerprintReader">
                                            <span class="spinner-border spinner-border-sm visually-hidden" role="status" aria-hidden="true"></span>
                                            <i class="bi bi-plus text-dark"></i>
                                            <i class="ri-fingerprint-fill text-dark"></i>
                                        </button>
                                    }
                                </div>
                            </td>
                            <td>
                                <div class="center-g">
                                    @if (item.Modules.Any(a => a.Type == "FacialReader"))
                                    {
                                        <button class="btn btn-success" type="button" data-idModulo="@item.GetModelesType("FacialReader")">
                                            <i class="ri-fingerprint-fill text-white"></i>
                                        </button>

                                        <div class="form-check form-switch">
                                            <input id="ActiveDesative" class="form-check-input" type="checkbox" @item.GetActive(item, "FacialReader") data-projectId="@item.Id" data-moduleId="@item.Modules.Where(x => x.Type == "FacialReader").FirstOrDefault().ModuleId">
                                            <label class="form-check-label" for="ActiveDesative">Status:</label>
                                        </div>
                                    }
                                    else
                                    {
                                        <button id="Save" class="btn btn-outline-warning modulos" type="button" data-id="@item.Id" data-type="FacialReader">
                                            <span class="spinner-border spinner-border-sm visually-hidden" role="status" aria-hidden="true"></span>

                                            <i class="bi bi-plus text-dark"></i>
                                            <i class="ri-fingerprint-fill text-dark"></i>
                                        </button>
                                    }

                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
            <!-- End Table with stripped rows -->
        </div>
    </div>

}


<div class="modal fade" id="Modal" tabindex="-1">
    <div class="modal-dialog modal-dialog-scrollable modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title"></h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div id="replaceTarget">

                </div>
            </div>
        </div>
    </div>
</div><!-- End Modal Dialog Scrollable-->




@section scripts{
    <script>


        $(document).on('click', "#NewProject", function (e) {
            $('#Modal').modal('show')

            GetData('@Url.Action("GetProductView", "Product", null,Request.Url.Scheme)', null, SuccessCallback);

            function SuccessCallback(result) {
                RenderPartial(result, $("#replaceTarget"));
            };

        });
        $(document).on('click', "#Save.newProject", function (e) {

             PostForm(this.form, '@Url.Action("Product", "Product", null,Request.Url.Scheme)', SuccessCallback, false);

            function SuccessCallback(result) {
                RenderPartial("", $("#replaceTarget"));
                $('#Modal').modal('hide')
                window.location.reload(true);
            };
        });
        $(document).on('click', "#Save.modulos", function (e) {

            var data = new Object();

            data.ProjectId = this.dataset.id
            data.ModuleId = this.dataset.idmodulo
            data.Type = this.dataset.type

            GetData('@Url.Action("GetModuleVM", "Product", Request.Url.Scheme)', data, SuccessCallback, false);

            function SuccessCallback(result) {
                $('#Modal').modal('show')
                RenderPartial(result, $("#replaceTarget"));
            };
        });

        $(document).on('click', "#Save.Rfid", function (e) {

             PostForm(this.form, '@Url.Action("PostModule", "Product", null,Request.Url.Scheme)', SuccessCallback, false);

            function SuccessCallback(result) {
                RenderPartial("", $("#replaceTarget"));
                $('#Modal').modal('hide')
                window.location.reload(true);
            };
        });

        $(document).on('click', "#Save.Rfid.NewInfo", function (e) {

             PostForm(this.form, '@Url.Action("NewMessage", "Product", null,Request.Url.Scheme)', SuccessCallback, false);

            function SuccessCallback(result) {
                ShowJsonResult(result)
            };
        });

        $(document).on('click', "#ActiveDesative", function (e) {
            var botao = $(this)
            var data = new Object();

            data.ModuleId = this.dataset.moduleid
            data.ProjectId = this.dataset.projectid
            data.Active = this.checked

            PutData(data, '@Url.Action("DesableModele", "Product", null,Request.Url.Scheme)',false, SuccessCallback);

            function SuccessCallback(result) {
                if (!ShowJsonResult(result)) {
                    botao.prop('checked', !botao.prop('checked'));
                }
            };
        });

        //$('#Modal').modal('hide')

        $(document).on('click', "#Save.TryComunication", function (e) {

            let formData = new FormData(this.form);
            let data = {}

            formData.forEach((value, key) => {
                data[key] = value;
            })
            PostForm(this.form , '@Url.Action("TryComunication", "Product", null,Request.Url.Scheme)', successCallback, false);

            function successCallback(result) {
                if (ShowJsonResult(result)) {
                    data.Id = result.MessageId
                    monitorApi(data, '@Url.Action("GetComunication", "Product", null,Request.Url.Scheme)');
                }
            };
        });

        function monitorApi(data, url, attempt = 1) {
            const maxAttempts = 15;
            const retryDelay = 5000; // 5 segundos de espera entre as tentativas

            GetData(url, data, handleSuccess, handleError);

            function handleSuccess(result) {
                if (result.data.Status === "SUCCESS") {
                    $("#Save.TryComunication").text('Sucesso');
                    toastr.success("A comunicação foi um sucesso");
                    PutData(data, '@Url.Action("MessageDesable", "Product", null, Request.Url.Scheme)', false);
                } else {
                    retryOrFail();
                }
            }
            function handleError() {
                console.error('Erro ao acessar a API.');
                retryOrFail();
            }
            function retryOrFail() {
                if (attempt < maxAttempts) {
                    toastr.warning('Aguardando uma resposta do Arduino, Aguarde...');
                    setTimeout(() => monitorApi(data, url, attempt + 1), retryDelay);
                } else {
                    toastr.error("Limite de tentativas atingido. Tente novamente!!!");
                    PutData(data, '@Url.Action("MessageDesable", "Product", null, Request.Url.Scheme)', false);
                }
            }
        }

    </script>
}